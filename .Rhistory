med_data <- json_data$entry$resource$entry[[1]]$resource
# 데이터 처리
# 이 부분은 입력 파일 구조에 따라 조정해야 할 수 있습니다.
med_data <- med_data %>%
mutate(medication_name = ifelse(!is.null(code$text), code$text, NA),
medication_frequency = ifelse(!is.null(dosageInstruction[[1]]$timing$`repeat`$frequency), dosageInstruction[[1]]$timing$`repeat`$frequency, NA),
medication_period = ifelse(!is.null(dosageInstruction[[1]]$timing$`repeat`$period), dosageInstruction[[1]]$timing$`repeat`$period, NA),
medication_duration = ifelse(!is.null(daysSupply$value), daysSupply$value, NA),
reference_id = gsub("Medication/", "", medicationReference$reference)
)
# 데이터프레임 생성
med_data <- med_data %>%
select(reference_id, whenPrepared, medication_period, medication_frequency, medication_duration, medication_name, resourceType, id)
all_grouped_data <- med_data1 %>%
group_by(resourceType) %>%
group_split()
all_grouped_data <- lapply(all_grouped_data, function(df) {
if ("Medication" %in% df$resourceType) {
df <- df %>%
filter(resourceType == "Medication") %>%
select(medication_name, id)
} else {
df <- df %>%
select(medication_period, medication_freqeuncy, medication_duration, referece_id , whenPrepared) %>%
rename(id = referece_id)
}
return(df)
})
# 첫 번째와 두 번째 데이터 프레임을 id를 기준으로 병합
merged_data <- full_join(all_grouped_data[[1]], all_grouped_data[[2]], by = "id")
date_group <- unique(merged_data$whenPrepared)
date_group
df_out <- data.frame(
date_group = date_group
)
df_out$json <-''
for(j in 1:length(date_group)){
temp <- merged_data[merged_data$whenPrepared == date_group[j],]
temp <- temp %>%
mutate(medication_type = "")
df_out$json[j] <- toJSON(temp)
}
df_out
df_out <- df_out %>%
rename(
'날짜' = date_group,
'처방정보' = json
)
output$dataTable <- renderDT({
datatable(df_out)
})
})
observeEvent(input$writeSheet, {
# Google Sheets에 데이터 저장
gs4_auth(email = "fhirboot@gmail.com")  # 실제 Google 계정 이메일로 변경 필요
sheet <- sheet_write(data = df_out, ss = "https://docs.google.com/spreadsheets/d/1dJJVFNhmyjFkOV-zT4XlYARPNpYpL651fgHekI1Uac0/edit?gid=0#gid=0", sheet = "Sheet1")  # 스프레드시트 ID와 시트 이름 지정 필요
})
}
shinyApp(ui, server)
library(shiny)
library(jsonlite)
library(dplyr)
library(DT)
library(googlesheets4)
ui <- fluidPage(
titlePanel("JSON 파일 업로드 및 데이터 처리"),
sidebarLayout(
sidebarPanel(
fileInput("file", "JSON 파일 선택", accept = ".json"),
actionButton("upload", "업로드 및 처리"),
actionButton("writeSheet", "Google Sheets에 저장")
),
mainPanel(
DTOutput("dataTable")
)
)
)
server <- function(input, output) {
observeEvent(input$upload, {
req(input$file)
# 파일 읽기
json_data <- fromJSON(input$file$datapath)
med_data <- json_data$entry$resource$entry[[1]]$resource
# 데이터 처리
# 이 부분은 입력 파일 구조에 따라 조정해야 할 수 있습니다.
med_data <- med_data %>%
mutate(medication_name = ifelse(!is.null(code$text), code$text, NA),
medication_frequency = ifelse(!is.null(dosageInstruction[[1]]$timing$`repeat`$frequency), dosageInstruction[[1]]$timing$`repeat`$frequency, NA),
medication_period = ifelse(!is.null(dosageInstruction[[1]]$timing$`repeat`$period), dosageInstruction[[1]]$timing$`repeat`$period, NA),
medication_duration = ifelse(!is.null(daysSupply$value), daysSupply$value, NA),
reference_id = gsub("Medication/", "", medicationReference$reference)
)
# 데이터프레임 생성
med_data <- med_data %>%
select(reference_id, whenPrepared, medication_period, medication_frequency, medication_duration, medication_name, resourceType, id)
all_grouped_data <- med_data1 %>%
group_by(resourceType) %>%
group_split()
all_grouped_data <- lapply(all_grouped_data, function(df) {
if ("Medication" %in% df$resourceType) {
df <- df %>%
filter(resourceType == "Medication") %>%
select(medication_name, id)
} else {
df <- df %>%
select(medication_period, medication_freqeuncy, medication_duration, referece_id , whenPrepared) %>%
rename(id = referece_id)
}
return(df)
})
# 첫 번째와 두 번째 데이터 프레임을 id를 기준으로 병합
merged_data <- full_join(all_grouped_data[[1]], all_grouped_data[[2]], by = "id")
date_group <- unique(merged_data$whenPrepared)
date_group
df_out <- data.frame(
date_group = date_group
)
df_out$json <-''
for(j in 1:length(date_group)){
temp <- merged_data[merged_data$whenPrepared == date_group[j],]
temp <- temp %>%
mutate(medication_type = "")
df_out$json[j] <- toJSON(temp)
}
df_out
df_out <- df_out %>%
rename(
'날짜' = date_group,
'처방정보' = json
)
output$dataTable <- renderDT({
datatable(df_out)
})
})
observeEvent(input$writeSheet, {
# Google Sheets에 데이터 저장
gs4_auth(email = "fhirboot@gmail.com")  # 실제 Google 계정 이메일로 변경 필요
sheet <- sheet_write(data = df_out, ss = "https://docs.google.com/spreadsheets/d/1dJJVFNhmyjFkOV-zT4XlYARPNpYpL651fgHekI1Uac0/edit?gid=0#gid=0", sheet = "Sheet1")  # 스프레드시트 ID와 시트 이름 지정 필요
})
}
shinyApp(ui, server)
med_data1<-med_data %>%
select(referece_id,whenPrepared,medication_period,medication_freqeuncy, medication_duration,medication_name,resourceType,id )
all_grouped_data <- med_data1 %>%
group_by(resourceType) %>%
group_split()
all_grouped_data <- lapply(all_grouped_data, function(df) {
if ("Medication" %in% df$resourceType) {
df <- df %>%
filter(resourceType == "Medication") %>%
select(medication_name, id)
} else {
df <- df %>%
select(medication_period, medication_freqeuncy, medication_duration, referece_id , whenPrepared) %>%
rename(id = referece_id)
}
return(df)
})
# 첫 번째와 두 번째 데이터 프레임을 id를 기준으로 병합
merged_data <- full_join(all_grouped_data[[1]], all_grouped_data[[2]], by = "id")
date_group <- unique(merged_data$whenPrepared)
date_group
df_out <- data.frame(
date_group = date_group
)
temp
library(shiny)
library(jsonlite)
library(dplyr)
library(DT)
library(googlesheets4)
ui <- fluidPage(
titlePanel("JSON 파일 업로드 및 데이터 처리"),
sidebarLayout(
sidebarPanel(
fileInput("file", "JSON 파일 선택", accept = ".json"),
actionButton("upload", "업로드 및 처리"),
actionButton("writeSheet", "Google Sheets에 저장")
),
mainPanel(
DTOutput("dataTable")
)
)
)
server <- function(input, output) {
observeEvent(input$upload, {
req(input$file)
# 파일 읽기
json_data <- fromJSON(input$file$datapath)
med_data <- json_data$entry$resource$entry[[1]]$resource
# 데이터 처리
# 이 부분은 입력 파일 구조에 따라 조정해야 할 수 있습니다.
med_data <- med_data %>%
mutate(medication_name = ifelse(!is.null(code$text), code$text, NA),
medication_frequency = ifelse(!is.null(dosageInstruction[[1]]$timing$`repeat`$frequency), dosageInstruction[[1]]$timing$`repeat`$frequency, NA),
medication_period = ifelse(!is.null(dosageInstruction[[1]]$timing$`repeat`$period), dosageInstruction[[1]]$timing$`repeat`$period, NA),
medication_duration = ifelse(!is.null(daysSupply$value), daysSupply$value, NA),
reference_id = gsub("Medication/", "", medicationReference$reference)
)
# 데이터프레임 생성
med_data <- med_data %>%
select(reference_id, whenPrepared, medication_period, medication_frequency, medication_duration, medication_name, resourceType, id)
all_grouped_data <- med_data1 %>%
group_by(resourceType) %>%
group_split()
all_grouped_data <- lapply(all_grouped_data, function(df) {
if ("Medication" %in% df$resourceType) {
df <- df %>%
filter(resourceType == "Medication") %>%
select(medication_name, id)
} else {
df <- df %>%
select(medication_period, medication_freqeuncy, medication_duration, referece_id , whenPrepared) %>%
rename(id = referece_id)
}
return(df)
})
# 첫 번째와 두 번째 데이터 프레임을 id를 기준으로 병합
merged_data <- full_join(all_grouped_data[[1]], all_grouped_data[[2]], by = "id")
date_group <- unique(merged_data$whenPrepared)
date_group
df_out <- data.frame(
date_group = date_group
)
df_out$json <-''
for(j in 1:length(date_group)){
temp <- merged_data[merged_data$whenPrepared == date_group[j],]
temp <- temp %>%
mutate(medication_type = "")
temp <- temp %>%
select(medication_name,medication_type,medication_period,medication_freqeuncy ,medication_duration )
df_out$json[j] <- toJSON(temp)
}
df_out
df_out <- df_out %>%
rename(
'날짜' = date_group,
'처방정보' = json
)
output$dataTable <- renderDT({
datatable(df_out)
})
})
observeEvent(input$writeSheet, {
# Google Sheets에 데이터 저장
gs4_auth(email = "fhirboot@gmail.com")  # 실제 Google 계정 이메일로 변경 필요
sheet <- sheet_write(data = df_out, ss = "https://docs.google.com/spreadsheets/d/1dJJVFNhmyjFkOV-zT4XlYARPNpYpL651fgHekI1Uac0/edit?gid=0#gid=0", sheet = "Sheet1")  # 스프레드시트 ID와 시트 이름 지정 필요
})
}
shinyApp(ui, server)
for(j in 1:length(date_group)){
temp <- merged_data[merged_data$whenPrepared == date_group[j],]
temp <- temp %>%
mutate(medication_type = "")
temp <- temp %>%
select(medication_name,medication_type,medication_period,medication_freqeuncy ,medication_duration )
df_out$json[j] <- toJSON(temp)
}
df_out
View(df_out)
library(shiny)
library(jsonlite)
library(dplyr)
library(DT)
library(googlesheets4)
ui <- fluidPage(
titlePanel("JSON 파일 업로드 및 데이터 처리"),
sidebarLayout(
sidebarPanel(
fileInput("file", "JSON 파일 선택", accept = ".json"),
actionButton("upload", "업로드 및 처리"),
actionButton("writeSheet", "Google Sheets에 저장")
),
mainPanel(
DTOutput("dataTable")
)
)
)
server <- function(input, output) {
observeEvent(input$upload, {
req(input$file)
# 파일 읽기
json_data <- fromJSON(input$file$datapath)
med_data <- json_data$entry$resource$entry[[1]]$resource
# 데이터 처리
# 이 부분은 입력 파일 구조에 따라 조정해야 할 수 있습니다.
med_data <- med_data %>%
mutate(medication_name = ifelse(!is.null(code$text), code$text, NA),
medication_frequency = ifelse(!is.null(dosageInstruction[[1]]$timing$`repeat`$frequency), dosageInstruction[[1]]$timing$`repeat`$frequency, NA),
medication_period = ifelse(!is.null(dosageInstruction[[1]]$timing$`repeat`$period), dosageInstruction[[1]]$timing$`repeat`$period, NA),
medication_duration = ifelse(!is.null(daysSupply$value), daysSupply$value, NA),
reference_id = gsub("Medication/", "", medicationReference$reference)
)
# 데이터프레임 생성
med_data <- med_data %>%
select(reference_id, whenPrepared, medication_period, medication_frequency, medication_duration, medication_name, resourceType, id)
all_grouped_data <- med_data1 %>%
group_by(resourceType) %>%
group_split()
all_grouped_data <- lapply(all_grouped_data, function(df) {
if ("Medication" %in% df$resourceType) {
df <- df %>%
filter(resourceType == "Medication") %>%
select(medication_name, id)
} else {
df <- df %>%
select(medication_period, medication_freqeuncy, medication_duration, referece_id , whenPrepared) %>%
rename(id = referece_id)
}
return(df)
})
# 첫 번째와 두 번째 데이터 프레임을 id를 기준으로 병합
merged_data <- full_join(all_grouped_data[[1]], all_grouped_data[[2]], by = "id")
date_group <- unique(merged_data$whenPrepared)
date_group
df_out <- data.frame(
date_group = date_group
)
df_out$json <-''
for(j in 1:length(date_group)){
temp <- merged_data[merged_data$whenPrepared == date_group[j],]
temp <- temp %>%
mutate(medication_type = "")
temp <- temp %>%
select(medication_name,medication_type,medication_period,medication_freqeuncy ,medication_duration )
df_out$json[j] <- toJSON(temp)
}
df_out
df_out <- df_out %>%
rename(
'날짜' = date_group,
'처방정보' = json
)
output$dataTable <- renderDT({
datatable(df_out)
})
})
observeEvent(input$writeSheet, {
# Google Sheets에 데이터 저장
gs4_auth(email = "fhirboot@gmail.com")  # 실제 Google 계정 이메일로 변경 필요
sheet <- sheet_write(data = df_out, ss = "https://docs.google.com/spreadsheets/d/1dJJVFNhmyjFkOV-zT4XlYARPNpYpL651fgHekI1Uac0/edit?gid=0#gid=0", sheet = "Sheet1")  # 스프레드시트 ID와 시트 이름 지정 필요
})
}
shinyApp(ui, server)
library(shiny)
library(jsonlite)
library(dplyr)
library(DT)
library(googlesheets4)
ui <- fluidPage(
titlePanel("JSON 파일 업로드 및 데이터 처리"),
sidebarLayout(
sidebarPanel(
fileInput("file", "JSON 파일 선택", accept = ".json"),
actionButton("upload", "업로드 및 처리"),
actionButton("writeSheet", "Google Sheets에 저장")
),
mainPanel(
DTOutput("dataTable")
)
)
)
server <- function(input, output) {
observeEvent(input$upload, {
req(input$file)
# 파일 읽기
json_data <- fromJSON(input$file$datapath)
med_data <- json_data$entry$resource$entry[[1]]$resource
# 데이터 처리
# 이 부분은 입력 파일 구조에 따라 조정해야 할 수 있습니다.
med_data <- med_data %>%
mutate(medication_name = ifelse(!is.null(code$text), code$text, NA),
medication_frequency = ifelse(!is.null(dosageInstruction[[1]]$timing$`repeat`$frequency), dosageInstruction[[1]]$timing$`repeat`$frequency, NA),
medication_period = ifelse(!is.null(dosageInstruction[[1]]$timing$`repeat`$period), dosageInstruction[[1]]$timing$`repeat`$period, NA),
medication_duration = ifelse(!is.null(daysSupply$value), daysSupply$value, NA),
reference_id = gsub("Medication/", "", medicationReference$reference)
)
# 데이터프레임 생성
med_data <- med_data %>%
select(reference_id, whenPrepared, medication_period, medication_frequency, medication_duration, medication_name, resourceType, id)
all_grouped_data <- med_data1 %>%
group_by(resourceType) %>%
group_split()
all_grouped_data <- lapply(all_grouped_data, function(df) {
if ("Medication" %in% df$resourceType) {
df <- df %>%
filter(resourceType == "Medication") %>%
select(medication_name, id)
} else {
df <- df %>%
select(medication_period, medication_freqeuncy, medication_duration, referece_id , whenPrepared) %>%
rename(id = referece_id)
}
return(df)
})
# 첫 번째와 두 번째 데이터 프레임을 id를 기준으로 병합
merged_data <- full_join(all_grouped_data[[1]], all_grouped_data[[2]], by = "id")
date_group <- unique(merged_data$whenPrepared)
date_group
df_out <- data.frame(
date_group = date_group
)
df_out$json <-''
for(j in 1:length(date_group)){
temp <- merged_data[merged_data$whenPrepared == date_group[j],]
temp <- temp %>%
mutate(medication_type = "")
temp <- temp %>%
select(medication_name,medication_type,medication_period,medication_freqeuncy ,medication_duration )
df_out$json[j] <- toJSON(temp)
}
df_out <<- df_out %>%
rename(
'날짜' = date_group,
'처방정보' = json
)
print(df_out)
output$dataTable <- renderDT({
datatable(df_out)
})
})
observeEvent(input$writeSheet, {
# Google Sheets에 데이터 저장
gs4_auth(email = "fhirboot@gmail.com")  # 실제 Google 계정 이메일로 변경 필요
sheet <- sheet_write(data = df_out, ss = "https://docs.google.com/spreadsheets/d/1dJJVFNhmyjFkOV-zT4XlYARPNpYpL651fgHekI1Uac0/edit?gid=0#gid=0", sheet = "Sheet1")  # 스프레드시트 ID와 시트 이름 지정 필요
})
}
shinyApp(ui, server)
library(shiny)
library(jsonlite)
library(dplyr)
library(DT)
library(googlesheets4)
ui <- fluidPage(
titlePanel("JSON 파일 업로드 및 데이터 처리"),
sidebarLayout(
sidebarPanel(
fileInput("file", "JSON 파일 선택", accept = ".json"),
actionButton("upload", "업로드 및 처리"),
actionButton("writeSheet", "Google Sheets에 저장")
),
mainPanel(
DTOutput("dataTable")
)
)
)
server <- function(input, output) {
observeEvent(input$upload, {
req(input$file)
# 파일 읽기
json_data <- fromJSON(input$file$datapath)
med_data <- json_data$entry$resource$entry[[1]]$resource
# 데이터 처리
# 이 부분은 입력 파일 구조에 따라 조정해야 할 수 있습니다.
med_data <- med_data %>%
mutate(medication_name = ifelse(!is.null(code$text), code$text, NA),
medication_frequency = ifelse(!is.null(dosageInstruction[[1]]$timing$`repeat`$frequency), dosageInstruction[[1]]$timing$`repeat`$frequency, NA),
medication_period = ifelse(!is.null(dosageInstruction[[1]]$timing$`repeat`$period), dosageInstruction[[1]]$timing$`repeat`$period, NA),
medication_duration = ifelse(!is.null(daysSupply$value), daysSupply$value, NA),
reference_id = gsub("Medication/", "", medicationReference$reference)
)
# 데이터프레임 생성
med_data <- med_data %>%
select(reference_id, whenPrepared, medication_period, medication_frequency, medication_duration, medication_name, resourceType, id)
all_grouped_data <- med_data1 %>%
group_by(resourceType) %>%
group_split()
all_grouped_data <- lapply(all_grouped_data, function(df) {
if ("Medication" %in% df$resourceType) {
df <- df %>%
filter(resourceType == "Medication") %>%
select(medication_name, id)
} else {
df <- df %>%
select(medication_period, medication_freqeuncy, medication_duration, referece_id , whenPrepared) %>%
rename(id = referece_id)
}
return(df)
})
# 첫 번째와 두 번째 데이터 프레임을 id를 기준으로 병합
merged_data <- full_join(all_grouped_data[[1]], all_grouped_data[[2]], by = "id")
date_group <- unique(merged_data$whenPrepared)
date_group
df_out <- data.frame(
date_group = date_group
)
df_out$json <-''
for(j in 1:length(date_group)){
temp <- merged_data[merged_data$whenPrepared == date_group[j],]
temp <- temp %>%
mutate(medication_type = "")
temp <- temp %>%
select(medication_name,medication_type,medication_period,medication_freqeuncy ,medication_duration )
df_out$json[j] <- toJSON(temp)
}
df_out <- df_out %>%
rename(
날짜 = date_group,
처방정보 = json
)
print(df_out)
output$dataTable <- renderDT({
datatable(df_out)
})
})
observeEvent(input$writeSheet, {
# Google Sheets에 데이터 저장
gs4_auth(email = "fhirboot@gmail.com")  # 실제 Google 계정 이메일로 변경 필요
sheet <- sheet_write(data = df_out, ss = "https://docs.google.com/spreadsheets/d/1dJJVFNhmyjFkOV-zT4XlYARPNpYpL651fgHekI1Uac0/edit?gid=0#gid=0", sheet = "Sheet1")  # 스프레드시트 ID와 시트 이름 지정 필요
})
}
shinyApp(ui, server)
